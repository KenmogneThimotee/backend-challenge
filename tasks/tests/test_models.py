from django.db.utils import IntegrityError
from django.forms import ValidationError
from django.test import TestCase
from user_management.models import User
from tasks.models import Task, Label

# Generated by CodiumAI

class TestTask(TestCase):
    
    # Creating a new task with valid title, description, priority, and created_by fields should save successfully.
    def test_valid_task_creation(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task(title='Test Task', description='This is a test task', priority=1, created_by=user)
        task.save()

        self.assertEqual(Task.objects.count(), 1)
        self.assertEqual(Task.objects.first(), task)

    # Creating a new task with an empty title should raise a validation error.
    def test_empty_title_task_creation(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task(title='', description='This is a test task', priority=1, created_by=user)

        with self.assertRaises(ValidationError):
            task.full_clean()

    # Updating an existing task with valid fields should save successfully.
    def test_update_existing_task_with_valid_fields(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task.objects.create(title='Test Task', description='This is a test task', priority=1, created_by=user)

        task.title = 'Updated Task'
        task.description = 'This is an updated task'
        task.priority = 2
        task.save()

        updated_task = Task.objects.get(id=task.id)

        self.assertEqual(updated_task.title, 'Updated Task')
        self.assertEqual(updated_task.description, 'This is an updated task')
        self.assertEqual(updated_task.priority, 2)
        self.assertEqual(updated_task.created_by, user)

    # Deleting an existing task should remove it from the database.
    def test_delete_existing_task(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task.objects.create(title='Test Task', description='This is a test task', priority=1, created_by=user)

        task.delete()

        self.assertEqual(Task.objects.count(), 0)

    # Creating a new task with a priority of -1 should raise a validation error.
    def test_create_new_task_with_priority_negative_validation_error(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')

        with self.assertRaises(ValidationError):
            task = Task(title='Test Task', description='This is a test task', priority=-1, created_by=user)
            task.full_clean()
            

    # Creating a new task with a non-existent user as the created_by field should raise an integrity error.
    def test_non_existent_user_as_created_by(self):
        
        with self.assertRaises(ValidationError):
            task = Task(title='Test Task', description='This is a test task', priority=1, created_by_id=999)
            task.full_clean()

    # Updating an existing task with an empty title should raise a validation error.
    def test_empty_title_on_update(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task(title='Test Task', description='This is a test task', priority=1, created_by=user)
        task.save()

        with self.assertRaises(ValidationError):
            task.title = ''
            task.full_clean()

    # Updating an existing task with a priority of -1 should raise a validation error.
    def test_update_task_with_priority_negative(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        task = Task.objects.create(title='Test Task', description='This is a test task', priority=1, created_by=user)

        task.priority = -1
        with self.assertRaises(ValidationError):
            task.full_clean()


class TestLabel(TestCase):

    def test_label_creation_with_name_and_user(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
    
        user.save()
        label.save()
        self.assertEqual(label.name, 'Test Label')
        self.assertEqual(label.created_by, user)

    # A label with an empty name cannot be created.
    def test_label_creation_with_empty_name(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        user.save()
        
        with self.assertRaises(ValidationError):
            label = Label.objects.create(name='', created_by=user)
            label.full_clean()
            

    # Tasks can be added to a label.
    def test_add_task_to_label(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
        task = Task.objects.create(title='Test Task', description='Test Description', priority=1, created_by=user)
        
        user.save()
        task.save()
        label.save()
        
        label.tasks.add(task)
    
        self.assertTrue(task in label.tasks.all())

    # Tasks can be removed from a label.
    def test_remove_task_from_label(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
        task = Task.objects.create(title='Test Task', description='Test Description', priority=1, created_by=user)
    
        user.save()
        task.save()
        label.save()
        
        label.tasks.add(task)
        label.tasks.remove(task)
    
        self.assertFalse(task in label.tasks.all())

    # A label can be deleted.
    def test_delete_label(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)

        user.save()
        label.save()
        
        label.delete()
    
        self.assertFalse(Label.objects.filter(name='Test Label').exists())

    # A label can be updated with a new name.
    def test_update_label_with_new_name(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
    
        user.save()
        label.save()
        
        new_name = 'New Label Name'
        label.name = new_name
        label.save()
    
        label = Label.objects.get(pk=label.id)
        self.assertEqual(label.name, new_name)

    # A label can be updated with new tasks.
    def test_update_label_with_new_tasks(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
        
        user.save()
        label.save()
        
        task1 = Task.objects.create(title='Task 1', description='Description 1', priority=1, created_by=user)
        task2 = Task.objects.create(title='Task 2', description='Description 2', priority=2, created_by=user)

        task1.save()
        task2.save()
        
        label.tasks.add(task1, task2)
        
        label.save()
    
        self.assertTrue(task1 in label.tasks.all())
        self.assertTrue(task2 in label.tasks.all())

    # A label can be updated with new tasks and a new name.
    def test_update_label_with_new_tasks_and_name(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
        
        user.save()
        label.save()
    
        task1 = Task.objects.create(title='Task 1', description='Description 1', priority=1, created_by=user)
        task2 = Task.objects.create(title='Task 2', description='Description 2', priority=2, created_by=user)
    
        new_name = 'New Label Name'
        label.name = new_name
        label.tasks.add(task1, task2)
        
        task1.save()
        task2.save()
        label.save()
    
        self.assertEqual(label.name, new_name)
        self.assertTrue(task1 in label.tasks.all())
        self.assertTrue(task2 in label.tasks.all())

    # A label can be retrieved with all its tasks.
    def test_retrieve_label_with_tasks(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        label = Label.objects.create(name='Test Label', created_by=user)
        task1 = Task.objects.create(title='Task 1', description='Description 1', priority=1, created_by=user)
        task2 = Task.objects.create(title='Task 2', description='Description 2', priority=2, created_by=user)
        label.tasks.add(task1, task2)
        
        user.save()
        task1.save()
        task2.save()
        label.save()
    
        retrieved_label = Label.objects.get(name='Test Label')
    
        self.assertEqual(retrieved_label.tasks.count(), 2)
        self.assertTrue(task1 in retrieved_label.tasks.all())
        self.assertTrue(task2 in retrieved_label.tasks.all())
        self.assertTrue(retrieved_label.created_by == user)


    # A label with a name longer than 50 characters cannot be created.
    def test_create_label_with_long_name(self):
        user = User.objects.create(email='test@example.com', first_name='John', last_name='Doe')
        long_name = 'a' * 51
    
        with self.assertRaises(ValidationError):
            label = Label.objects.create(name=long_name, created_by=user)
            label.full_clean()


    # A label with a user that does not exist cannot be created.
    def test_label_creation_with_nonexistent_user(self):
        with self.assertRaises(ValidationError):
            label = Label(name='Test Label', created_by_id=999)
            label.full_clean()